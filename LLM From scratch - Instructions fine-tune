{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "863cd267",
   "metadata": {
    "papermill": {
     "duration": 0.006567,
     "end_time": "2025-05-11T18:41:40.625635",
     "exception": false,
     "start_time": "2025-05-11T18:41:40.619068",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Fine-tuning to follow instructions\n",
    "\n",
    "This section will cover the fine-tuning of a LLM to follow human instructions. This is one of the main techniques behind developing LLMs for chatbot applications, personal assistants, and other conversational tasks.\n",
    "\n",
    "## Introduction to instruction fine-tuning\n",
    "\n",
    "The pretraining of the LLM is capable of *text completion*, meaning it can finish sentences or write text paragraphs given a fragment as input. However, pretrained LLMs oftern stuggle with specific instructions, such as \"Fix the grammar in this text\" or \"Convert this text into passive voice\".\n",
    "\n",
    "The first step is to prepare the dataset, so a given instruction produce a desired response:\n",
    "\n",
    "---\n",
    "Example:\n",
    "\n",
    "|Instruction|Desired response|\n",
    "| ----------- | ----------- |\n",
    "|Convert 45 kilometer to meters|45 kilometers is 45000 meters|\n",
    "|Provide a synonym for \"bright\"|A synonym for \"bright\" is \"radiant\"|\n",
    "|Edit the following sentence to remove all passive voice: \"The song was composed by the artist\"|The artist composed the song|\n",
    "\n",
    "\n",
    "## Preparing a dataset for supervised instruction fine-tuning\n",
    "\n",
    "The downloaded dataset constist of 1,100 instruction-response pairs similar to those in the previous table.\n",
    "\n",
    "> **NOTE:** The following dataset was created specifically for the book."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "67ac8cda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:41:40.638070Z",
     "iopub.status.busy": "2025-05-11T18:41:40.637437Z",
     "iopub.status.idle": "2025-05-11T18:41:40.643034Z",
     "shell.execute_reply": "2025-05-11T18:41:40.642518Z"
    },
    "papermill": {
     "duration": 0.012848,
     "end_time": "2025-05-11T18:41:40.644181",
     "exception": false,
     "start_time": "2025-05-11T18:41:40.631333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import urllib.request"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f97f0e54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:41:40.656061Z",
     "iopub.status.busy": "2025-05-11T18:41:40.655605Z",
     "iopub.status.idle": "2025-05-11T18:41:44.476176Z",
     "shell.execute_reply": "2025-05-11T18:41:44.475369Z"
    },
    "papermill": {
     "duration": 3.827939,
     "end_time": "2025-05-11T18:41:44.477599",
     "exception": false,
     "start_time": "2025-05-11T18:41:40.649660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "url = (\n",
    "    \"https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/ch05/01_main-chapter-code/previous_chapters.py\"\n",
    ")\n",
    "filename = url.split(\"/\")[-1]\n",
    "urllib.request.urlretrieve(url, filename)\n",
    "\n",
    "from previous_chapters import GPTModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e6df8b89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:41:44.490096Z",
     "iopub.status.busy": "2025-05-11T18:41:44.489529Z",
     "iopub.status.idle": "2025-05-11T18:41:58.531217Z",
     "shell.execute_reply": "2025-05-11T18:41:58.530380Z"
    },
    "papermill": {
     "duration": 14.049299,
     "end_time": "2025-05-11T18:41:58.532701",
     "exception": false,
     "start_time": "2025-05-11T18:41:44.483402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-11 18:41:46.239333: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1746988906.430245      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1746988906.490142      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "url = (\n",
    "    \"https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/ch05/01_main-chapter-code/gpt_generate.py\"\n",
    ")\n",
    "filename = url.split(\"/\")[-1]\n",
    "urllib.request.urlretrieve(url, filename)\n",
    "\n",
    "from gpt_generate import load_weights_into_gpt, text_to_token_ids, token_ids_to_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7fd5b11a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:41:58.545417Z",
     "iopub.status.busy": "2025-05-11T18:41:58.544939Z",
     "iopub.status.idle": "2025-05-11T18:41:58.706702Z",
     "shell.execute_reply": "2025-05-11T18:41:58.706163Z"
    },
    "papermill": {
     "duration": 0.169313,
     "end_time": "2025-05-11T18:41:58.707887",
     "exception": false,
     "start_time": "2025-05-11T18:41:58.538574",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "url = (\n",
    "    \"https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/ch05/01_main-chapter-code/gpt_download.py\"\n",
    ")\n",
    "filename = url.split(\"/\")[-1]\n",
    "urllib.request.urlretrieve(url, filename)\n",
    "\n",
    "from gpt_download import download_and_load_gpt2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "81cb51ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:41:58.720623Z",
     "iopub.status.busy": "2025-05-11T18:41:58.720400Z",
     "iopub.status.idle": "2025-05-11T18:41:58.755650Z",
     "shell.execute_reply": "2025-05-11T18:41:58.755130Z"
    },
    "papermill": {
     "duration": 0.042571,
     "end_time": "2025-05-11T18:41:58.756711",
     "exception": false,
     "start_time": "2025-05-11T18:41:58.714140",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import urllib.request\n",
    "url = (\n",
    "    \"https://raw.githubusercontent.com/rasbt/LLMs-from-scratch/main/ch05/01_main-chapter-code/gpt_download.py\"\n",
    ")\n",
    "filename = url.split(\"/\")[-1]\n",
    "urllib.request.urlretrieve(url, filename)\n",
    "\n",
    "from gpt_download import download_and_load_gpt2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "03927318",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:41:58.769378Z",
     "iopub.status.busy": "2025-05-11T18:41:58.769152Z",
     "iopub.status.idle": "2025-05-11T18:41:59.155179Z",
     "shell.execute_reply": "2025-05-11T18:41:59.154333Z"
    },
    "papermill": {
     "duration": 0.393707,
     "end_time": "2025-05-11T18:41:59.156327",
     "exception": false,
     "start_time": "2025-05-11T18:41:58.762620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of entries: 1100\n",
      "Example entry:\n",
      " {'instruction': 'Identify the correct spelling of the following word.', 'input': 'Ocassion', 'output': \"The correct spelling is 'Occasion.'\"}\n",
      "Another exmaple entry:\n",
      " {'instruction': \"What is an antonym of 'complicated'?\", 'input': '', 'output': \"An antonym of 'complicated' is 'simple'.\"}\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import os\n",
    "import urllib\n",
    "import torch\n",
    "\n",
    "# Creating a dictionary of GPTModel configurations will help to load weights and configuration\n",
    "# based on the GPT model to be used.\n",
    "model_configs = {\n",
    "    \"gpt2-small (124M)\": {\"emb_dim\": 768, \"n_layers\": 12, \"n_heads\": 12},\n",
    "    \"gpt2-medium (355M)\": {\"emb_dim\": 1024, \"n_layers\": 24, \"n_heads\": 16},\n",
    "    \"gpt2-large (774M)\": {\"emb_dim\": 1280, \"n_layers\": 36, \"n_heads\": 20},\n",
    "    \"gpt2-xl (1558M)\": {\"emb_dim\": 1600, \"n_layers\": 48, \"n_heads\": 25}\n",
    "}\n",
    "\n",
    "def download_and_load_file(file_path, url):\n",
    "    if not os.path.exists(file_path):\n",
    "        with urllib.request.urlopen(url) as response:\n",
    "            text_data = response.read().decode(\"utf-8\")\n",
    "\n",
    "        with open(file_path, \"w\", encoding='utf-8') as file:\n",
    "            file.write(text_data)\n",
    "\n",
    "    with open(file_path, \"r\") as file:\n",
    "        data = json.load(file)\n",
    "    return data\n",
    "\n",
    "file_path = \"instruction-data.json\"\n",
    "url = (\n",
    "    \"https://raw.githubusercontent.com/rasbt/LLMs-from-scratch\"\n",
    "    \"/main/ch07/01_main-chapter-code/instruction-data.json\"\n",
    ")\n",
    "\n",
    "data = download_and_load_file(file_path, url)\n",
    "print(\"Number of entries:\", len(data))\n",
    "\n",
    "print(\"Example entry:\\n\", data[50])\n",
    "\n",
    "print(\"Another exmaple entry:\\n\", data[999])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60b09d19",
   "metadata": {
    "papermill": {
     "duration": 0.005493,
     "end_time": "2025-05-11T18:41:59.167835",
     "exception": false,
     "start_time": "2025-05-11T18:41:59.162342",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In this dataset, the samples are formatted as a python dictionary. Although, there are various way to format the samples, often called *prompt styles*.\n",
    "\n",
    "The current entry in the instruction dataset is:\n",
    "```\n",
    "{\n",
    "    'instruction': 'Identify the correct spelling of the following word.', \n",
    "    'input': 'Ocassion', \n",
    "    'output': \"The correct spelling is 'Occasion.'\"\n",
    "}\n",
    "```\n",
    "\n",
    "One way to format the data entry to train the LLM is like Alpaca \n",
    "```\n",
    "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n",
    "\n",
    "### Instruction:\n",
    "Identify the correct spelling of the following word.\n",
    "\n",
    "### Input:\n",
    "Ocassion\n",
    "\n",
    "### Response:\n",
    "The correct spelling is 'Occasion'.\n",
    "```\n",
    "\n",
    "Or applying Phi-3 prompt style\n",
    "```\n",
    "<|user|>\n",
    "Identify the correct spelling of the following word: 'Ocassion'\n",
    "\n",
    "<|assistant|>\n",
    "The correct spelling is 'Occasion'.\n",
    "```\n",
    "\n",
    "From now on, Alpaca prompt style is going to be used, mainly becuase is the more popular ones and it helped to define the original approach to fine-tuning.\n",
    "\n",
    "Given the dataset, here is defined a function that convert the original entries into the Alpaca-style input format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6961a48f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:41:59.179910Z",
     "iopub.status.busy": "2025-05-11T18:41:59.179674Z",
     "iopub.status.idle": "2025-05-11T18:41:59.183670Z",
     "shell.execute_reply": "2025-05-11T18:41:59.183001Z"
    },
    "papermill": {
     "duration": 0.011214,
     "end_time": "2025-05-11T18:41:59.184648",
     "exception": false,
     "start_time": "2025-05-11T18:41:59.173434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def format_input(entry):\n",
    "    instruction_text = (\n",
    "        f\"Bellow is an instruction that describes a task. \"\n",
    "        f\"Write a response that appropriately completes the request.\"\n",
    "        f\"\\n\\n### Instruction:\\n{entry['instruction']}\"\n",
    "    )\n",
    "\n",
    "    input_text = (\n",
    "        f\"\\n\\n### Input:\\n{entry['input']}\" if entry['input'] else \"\"\n",
    "    )\n",
    "\n",
    "    return instruction_text + input_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ef521ee3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:41:59.196691Z",
     "iopub.status.busy": "2025-05-11T18:41:59.196477Z",
     "iopub.status.idle": "2025-05-11T18:41:59.200420Z",
     "shell.execute_reply": "2025-05-11T18:41:59.199582Z"
    },
    "papermill": {
     "duration": 0.011299,
     "end_time": "2025-05-11T18:41:59.201432",
     "exception": false,
     "start_time": "2025-05-11T18:41:59.190133",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bellow is an instruction that describes a task. Write a response that appropriately completes the request.\n",
      "\n",
      "### Instruction:\n",
      "Identify the correct spelling of the following word.\n",
      "\n",
      "### Input:\n",
      "Ocassion\n",
      "\n",
      "### Response:\n",
      "The correct spelling is 'Occasion.'\n"
     ]
    }
   ],
   "source": [
    "model_input = format_input(data[50])\n",
    "desired_response = f\"\\n\\n### Response:\\n{data[50]['output']}\"\n",
    "print(model_input + desired_response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "30978d12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:41:59.213215Z",
     "iopub.status.busy": "2025-05-11T18:41:59.212989Z",
     "iopub.status.idle": "2025-05-11T18:41:59.216848Z",
     "shell.execute_reply": "2025-05-11T18:41:59.216172Z"
    },
    "papermill": {
     "duration": 0.011266,
     "end_time": "2025-05-11T18:41:59.218209",
     "exception": false,
     "start_time": "2025-05-11T18:41:59.206943",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bellow is an instruction that describes a task. Write a response that appropriately completes the request.\n",
      "\n",
      "### Instruction:\n",
      "What is an antonym of 'complicated'?\n",
      "\n",
      "### Response:\n",
      "An antonym of 'complicated' is 'simple'.\n"
     ]
    }
   ],
   "source": [
    "# In case that 'input' is not given, the function omit the Input section in the prompt\n",
    "model_input = format_input(data[999])\n",
    "desired_response = f\"\\n\\n### Response:\\n{data[999]['output']}\"\n",
    "print(model_input + desired_response)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "85e60986",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:41:59.230942Z",
     "iopub.status.busy": "2025-05-11T18:41:59.230409Z",
     "iopub.status.idle": "2025-05-11T18:41:59.235113Z",
     "shell.execute_reply": "2025-05-11T18:41:59.234483Z"
    },
    "papermill": {
     "duration": 0.012027,
     "end_time": "2025-05-11T18:41:59.236135",
     "exception": false,
     "start_time": "2025-05-11T18:41:59.224108",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set length: 935\n",
      "Validation set length: 55\n",
      "Test set length: 110\n"
     ]
    }
   ],
   "source": [
    "train_portion = int(len(data) * 0.85)\n",
    "test_portion = int(len(data) * 0.1)\n",
    "val_portion = len(data) - train_portion - test_portion\n",
    "\n",
    "train_data = data[:train_portion]\n",
    "test_data = data[train_portion:train_portion + test_portion]\n",
    "val_data = data[train_portion + test_portion:]\n",
    "\n",
    "print(\"Training set length:\", len(train_data))\n",
    "print(\"Validation set length:\", len(val_data))\n",
    "print(\"Test set length:\", len(test_data))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "427e13c4",
   "metadata": {
    "papermill": {
     "duration": 0.005566,
     "end_time": "2025-05-11T18:41:59.247329",
     "exception": false,
     "start_time": "2025-05-11T18:41:59.241763",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Organizing data into training batches\n",
    "\n",
    "This section is about constructing the training batches effectively, involving the process of defining a function that recieves the data in its correct format.\n",
    "\n",
    "In previous implementations, the batches were created automatically by the PyTorch `DataLoader` class. But this time, the *collate* functions must be a user defined functions to be plugged into the `DataLoader`.\n",
    "\n",
    "> **Why not using `DataLoader`?**\n",
    "> Becuase to train a model to follow instruction we must create specific arrangements on the data:\n",
    "> 1. Pad all samples to be the same lenght while allowing different batches to have differents length. By picking the longest sequence and extending the other ones with a token to be ignored (this case the `<|endoftext|>`) and replace it with -100 placeholder to exclude it from any contribution to the loss function.\n",
    "> 2. We don't have a traditional label to let the LLM know the target. To let the model predict the next word in the sequence, the alternative is to shift one position to the right.\n",
    ">\n",
    "> As you might see, using -100 is a particular number. The choice of using this value is becuase the PyTorch function has a default setting `cross_entropy(..., ignore_index=-100)`. You can test it by your own by runing this in a cell `?torch.nn.functional.cross_entropy` and it will return its signature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e41b0e4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:41:59.259372Z",
     "iopub.status.busy": "2025-05-11T18:41:59.258715Z",
     "iopub.status.idle": "2025-05-11T18:41:59.263249Z",
     "shell.execute_reply": "2025-05-11T18:41:59.262705Z"
    },
    "papermill": {
     "duration": 0.011557,
     "end_time": "2025-05-11T18:41:59.264283",
     "exception": false,
     "start_time": "2025-05-11T18:41:59.252726",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch.utils.data import Dataset\n",
    "\n",
    "class InstructionDataset(Dataset):\n",
    "    def __init__(self, data, tokenizer):\n",
    "        self.data = data\n",
    "        self.encoded_texts = []\n",
    "        for entry in data:\n",
    "            instruction_plus_input = format_input(entry)\n",
    "            response_text = f\"\\n\\n### Response:\\n{entry['output']}\"\n",
    "            full_text = instruction_plus_input + response_text\n",
    "            self.encoded_texts.append(\n",
    "                tokenizer.encode(full_text)\n",
    "            )\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        return self.encoded_texts[index]\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e28cc266",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:41:59.276218Z",
     "iopub.status.busy": "2025-05-11T18:41:59.276036Z",
     "iopub.status.idle": "2025-05-11T18:42:00.819107Z",
     "shell.execute_reply": "2025-05-11T18:42:00.818368Z"
    },
    "papermill": {
     "duration": 1.550486,
     "end_time": "2025-05-11T18:42:00.820253",
     "exception": false,
     "start_time": "2025-05-11T18:41:59.269767",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[50256]\n"
     ]
    }
   ],
   "source": [
    "import tiktoken\n",
    "\n",
    "tokenizer = tiktoken.get_encoding(\"gpt2\")\n",
    "print(tokenizer.encode(\"<|endoftext|>\", allowed_special={\"<|endoftext|>\"}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "feb8714b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:42:00.832784Z",
     "iopub.status.busy": "2025-05-11T18:42:00.832561Z",
     "iopub.status.idle": "2025-05-11T18:42:00.836250Z",
     "shell.execute_reply": "2025-05-11T18:42:00.835575Z"
    },
    "papermill": {
     "duration": 0.011147,
     "end_time": "2025-05-11T18:42:00.837293",
     "exception": false,
     "start_time": "2025-05-11T18:42:00.826146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Testing that the custome collate function works as intended\n",
    "inputs_1 = [0, 1, 2, 3, 4]\n",
    "inputs_2 = [5, 6]\n",
    "inputs_3 = [7, 8, 9]\n",
    "batch = (\n",
    "    inputs_1,\n",
    "    inputs_2,\n",
    "    inputs_3\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7e7ab1f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:42:00.849264Z",
     "iopub.status.busy": "2025-05-11T18:42:00.849083Z",
     "iopub.status.idle": "2025-05-11T18:42:00.854732Z",
     "shell.execute_reply": "2025-05-11T18:42:00.854087Z"
    },
    "papermill": {
     "duration": 0.012878,
     "end_time": "2025-05-11T18:42:00.855719",
     "exception": false,
     "start_time": "2025-05-11T18:42:00.842841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def custom_collate_fn(\n",
    "    batch,\n",
    "    pad_token_id=50256,\n",
    "    ignore_index=-100,\n",
    "    allowed_max_length=None,\n",
    "    device=\"cpu\"\n",
    "):\n",
    "    batch_max_length = max(len(item)+1 for item in batch)\n",
    "    inputs_lst, targets_lst = [], []\n",
    "\n",
    "    for item in batch:\n",
    "        new_item = item.copy()\n",
    "        new_item += [pad_token_id]\n",
    "\n",
    "        padded = (\n",
    "            new_item + [pad_token_id] *\n",
    "            (batch_max_length - len(new_item))\n",
    "        )\n",
    "        inputs = torch.tensor(padded[:-1])\n",
    "        targets = torch.tensor(padded[1:])\n",
    "\n",
    "        mask = targets == pad_token_id\n",
    "        indices = torch.nonzero(mask).squeeze()\n",
    "        if indices.numel() > 1:\n",
    "            targets[indices[1:]] = ignore_index\n",
    "\n",
    "        if allowed_max_length is not None:\n",
    "            inputs = inputs[:allowed_max_length]\n",
    "            targets = targets[:allowed_max_length]\n",
    "        \n",
    "        inputs_lst.append(inputs)\n",
    "        targets_lst.append(targets)\n",
    "\n",
    "    inputs_tensor = torch.stack(inputs_lst).to(device)\n",
    "    targets_tensor = torch.stack(targets_lst).to(device)\n",
    "    return inputs_tensor, targets_tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b39050eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:42:00.867615Z",
     "iopub.status.busy": "2025-05-11T18:42:00.867420Z",
     "iopub.status.idle": "2025-05-11T18:42:00.926887Z",
     "shell.execute_reply": "2025-05-11T18:42:00.926114Z"
    },
    "papermill": {
     "duration": 0.066704,
     "end_time": "2025-05-11T18:42:00.928012",
     "exception": false,
     "start_time": "2025-05-11T18:42:00.861308",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[    0,     1,     2,     3,     4],\n",
      "        [    5,     6, 50256, 50256, 50256],\n",
      "        [    7,     8,     9, 50256, 50256]])\n",
      "tensor([[    1,     2,     3,     4, 50256],\n",
      "        [    6, 50256,  -100,  -100,  -100],\n",
      "        [    8,     9, 50256,  -100,  -100]])\n"
     ]
    }
   ],
   "source": [
    "inputs, targets = custom_collate_fn(batch)\n",
    "print(inputs)\n",
    "print(targets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "efe4ccfc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:42:00.940220Z",
     "iopub.status.busy": "2025-05-11T18:42:00.940040Z",
     "iopub.status.idle": "2025-05-11T18:42:00.998412Z",
     "shell.execute_reply": "2025-05-11T18:42:00.997732Z"
    },
    "papermill": {
     "duration": 0.065786,
     "end_time": "2025-05-11T18:42:00.999544",
     "exception": false,
     "start_time": "2025-05-11T18:42:00.933758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Device: cuda\n"
     ]
    }
   ],
   "source": [
    "from functools import partial\n",
    "\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(\"Device:\", device)\n",
    "\n",
    "customized_collate_fn = partial(\n",
    "    custom_collate_fn,\n",
    "    device=device,\n",
    "    allowed_max_length=1024\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "60e5b92a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:42:01.012712Z",
     "iopub.status.busy": "2025-05-11T18:42:01.012475Z",
     "iopub.status.idle": "2025-05-11T18:42:01.055332Z",
     "shell.execute_reply": "2025-05-11T18:42:01.054744Z"
    },
    "papermill": {
     "duration": 0.050715,
     "end_time": "2025-05-11T18:42:01.056564",
     "exception": false,
     "start_time": "2025-05-11T18:42:01.005849",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from torch.utils.data import DataLoader\n",
    "\n",
    "num_workers = 0\n",
    "batch_size = 8\n",
    "\n",
    "torch.manual_seed(123)\n",
    "\n",
    "train_dataset = InstructionDataset(train_data, tokenizer)\n",
    "train_loader = DataLoader(\n",
    "    train_dataset,\n",
    "    batch_size=batch_size,\n",
    "    collate_fn=customized_collate_fn,\n",
    "    shuffle=True,\n",
    "    drop_last=True,\n",
    "    num_workers=num_workers\n",
    ")\n",
    "\n",
    "val_dataset = InstructionDataset(val_data, tokenizer)\n",
    "val_loader = DataLoader(\n",
    "    val_dataset,\n",
    "    batch_size=batch_size,\n",
    "    collate_fn=customized_collate_fn,\n",
    "    shuffle=False,\n",
    "    drop_last=False,\n",
    "    num_workers=num_workers\n",
    ")\n",
    "\n",
    "test_dataset = InstructionDataset(test_data, tokenizer)\n",
    "test_loader = DataLoader(\n",
    "    test_dataset,\n",
    "    batch_size=batch_size,\n",
    "    collate_fn=customized_collate_fn,\n",
    "    shuffle=False,\n",
    "    drop_last=False,\n",
    "    num_workers=num_workers\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e918425a",
   "metadata": {
    "papermill": {
     "duration": 0.006088,
     "end_time": "2025-05-11T18:42:01.068755",
     "exception": false,
     "start_time": "2025-05-11T18:42:01.062667",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Loading a pretrained LLM\n",
    "\n",
    "For this fine-tuning, the model to be loaded is the pretrained GPT model with 355-million parameters. The reason is that the 124-million-parameter model is too limited in capacity to achieve satisfactory results via fine-tuning. Specifically, smaller models lack the necessary capacity to learn and retain the intricate patterns and nuanced bahaviours required for high-quality instruction-following tasks.\n",
    "\n",
    "To create a baseline of model's performance, loading the 355M parameters and then providing it with an initial prompt would describe how it currently works and what to expect once the fine-tuning ended."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8017ed86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:42:01.081437Z",
     "iopub.status.busy": "2025-05-11T18:42:01.080934Z",
     "iopub.status.idle": "2025-05-11T18:42:01.085362Z",
     "shell.execute_reply": "2025-05-11T18:42:01.084792Z"
    },
    "papermill": {
     "duration": 0.011876,
     "end_time": "2025-05-11T18:42:01.086378",
     "exception": false,
     "start_time": "2025-05-11T18:42:01.074502",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "CHOOSE_MODEL = \"gpt2-medium (355M)\"\n",
    "BASE_CONFIG = {\n",
    "    \"vocab_size\": 50257,\n",
    "    \"context_length\": 1024,\n",
    "    \"drop_rate\": 0.0,\n",
    "    \"qkv_bias\": True\n",
    "}\n",
    "MODEL_CONFIGS = {\n",
    "    \"gpt2-small (124M)\": {\"emb_dim\": 768, \"n_layers\": 12, \"n_heads\": 12},\n",
    "    \"gpt2-medium (355M)\": {\"emb_dim\": 1024, \"n_layers\": 24, \"n_heads\": 16},\n",
    "    \"gpt2-larget (774M)\": {\"emb_dim\": 1280, \"n_layers\": 36, \"n_heads\": 20},\n",
    "    \"gpt2-xl (1558M)\": {\"emb_dim\": 1600, \"n_layers\": 48, \"n_heads\": 25}\n",
    "}\n",
    "BASE_CONFIG.update(model_configs[CHOOSE_MODEL])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "94f580c3",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2025-05-11T18:42:01.099108Z",
     "iopub.status.busy": "2025-05-11T18:42:01.098926Z",
     "iopub.status.idle": "2025-05-11T18:44:16.425475Z",
     "shell.execute_reply": "2025-05-11T18:44:16.424814Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 135.334127,
     "end_time": "2025-05-11T18:44:16.426857",
     "exception": false,
     "start_time": "2025-05-11T18:42:01.092730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "checkpoint: 100%|██████████| 77.0/77.0 [00:00<00:00, 125kiB/s]\n",
      "encoder.json: 100%|██████████| 1.04M/1.04M [00:00<00:00, 2.06MiB/s]\n",
      "hparams.json: 100%|██████████| 91.0/91.0 [00:00<00:00, 189kiB/s]\n",
      "model.ckpt.data-00000-of-00001: 100%|██████████| 1.42G/1.42G [02:06<00:00, 11.2MiB/s]\n",
      "model.ckpt.index: 100%|██████████| 10.4k/10.4k [00:00<00:00, 14.2MiB/s]\n",
      "model.ckpt.meta: 100%|██████████| 927k/927k [00:00<00:00, 1.86MiB/s]\n",
      "vocab.bpe: 100%|██████████| 456k/456k [00:00<00:00, 1.37MiB/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GPTModel(\n",
       "  (tok_emb): Embedding(50257, 1024)\n",
       "  (pos_emb): Embedding(1024, 1024)\n",
       "  (drop_emb): Dropout(p=0.0, inplace=False)\n",
       "  (trf_blocks): Sequential(\n",
       "    (0): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (1): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (2): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (3): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (4): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (5): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (6): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (7): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (8): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (9): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (10): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (11): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (12): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (13): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (14): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (15): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (16): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (17): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (18): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (19): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (20): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (21): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (22): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "    (23): TransformerBlock(\n",
       "      (att): MultiHeadAttention(\n",
       "        (W_query): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_key): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (W_value): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n",
       "        (dropout): Dropout(p=0.0, inplace=False)\n",
       "      )\n",
       "      (ff): FeedForward(\n",
       "        (layers): Sequential(\n",
       "          (0): Linear(in_features=1024, out_features=4096, bias=True)\n",
       "          (1): GELU()\n",
       "          (2): Linear(in_features=4096, out_features=1024, bias=True)\n",
       "        )\n",
       "      )\n",
       "      (norm1): LayerNorm()\n",
       "      (norm2): LayerNorm()\n",
       "      (drop_shortcut): Dropout(p=0.0, inplace=False)\n",
       "    )\n",
       "  )\n",
       "  (final_norm): LayerNorm()\n",
       "  (out_head): Linear(in_features=1024, out_features=50257, bias=False)\n",
       ")"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_size = CHOOSE_MODEL.split(\" \")[-1].lstrip(\"(\").rstrip(\")\")\n",
    "settings, params = download_and_load_gpt2(\n",
    "    model_size=model_size, models_dir=\"gpt2\"\n",
    ")\n",
    "\n",
    "model = GPTModel(BASE_CONFIG)\n",
    "load_weights_into_gpt(model, params)\n",
    "model.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "825db23e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:44:16.526322Z",
     "iopub.status.busy": "2025-05-11T18:44:16.526061Z",
     "iopub.status.idle": "2025-05-11T18:44:16.531385Z",
     "shell.execute_reply": "2025-05-11T18:44:16.530619Z"
    },
    "papermill": {
     "duration": 0.05537,
     "end_time": "2025-05-11T18:44:16.532441",
     "exception": false,
     "start_time": "2025-05-11T18:44:16.477071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bellow is an instruction that describes a task. Write a response that appropriately completes the request.\n",
      "\n",
      "### Instruction:\n",
      "Convert the active sentence to passive: 'The chef cooks the meal every day.'\n"
     ]
    }
   ],
   "source": [
    "torch.manual_seed(123)\n",
    "input_text = format_input(val_data[0])\n",
    "print(input_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8365bde6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:44:16.631599Z",
     "iopub.status.busy": "2025-05-11T18:44:16.631183Z",
     "iopub.status.idle": "2025-05-11T18:44:16.636812Z",
     "shell.execute_reply": "2025-05-11T18:44:16.636275Z"
    },
    "papermill": {
     "duration": 0.056198,
     "end_time": "2025-05-11T18:44:16.637848",
     "exception": false,
     "start_time": "2025-05-11T18:44:16.581650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def generate(model, idx, max_new_tokens, context_size, temperature=0.0, top_k=None, eos_id=None):\n",
    "    for _ in range(max_new_tokens):\n",
    "        idx_cond = idx[:, -context_size:]\n",
    "        with torch.no_grad():\n",
    "            logits = model(idx_cond)\n",
    "\n",
    "        logits = logits[:, -1, :]\n",
    "        if top_k is not None:\n",
    "            top_logits, _ = torch.topk(logits, top_k)\n",
    "            min_val = top_logits[:, -1]\n",
    "            logits = torch.where(\n",
    "                logits < min_val,\n",
    "                torch.tensor(float('-inf')).to(logits.device),\n",
    "                logits\n",
    "            )\n",
    "        if temperature > 0.0:\n",
    "            logits = logits / temperature\n",
    "            probs = torch.softmax(logits, dim=-1)\n",
    "            idx_next = torch.multinomial(probs, num_samples=1)\n",
    "        else:\n",
    "            idx_next = torch.argmax(logits, dim=-1, keepdim=True)\n",
    "\n",
    "        if idx_next == eos_id:\n",
    "            break\n",
    "\n",
    "        idx = torch.cat((idx, idx_next), dim=1)\n",
    "\n",
    "    return idx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e5910de4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:44:16.735501Z",
     "iopub.status.busy": "2025-05-11T18:44:16.735325Z",
     "iopub.status.idle": "2025-05-11T18:44:30.154847Z",
     "shell.execute_reply": "2025-05-11T18:44:30.154225Z"
    },
    "papermill": {
     "duration": 13.47062,
     "end_time": "2025-05-11T18:44:30.156306",
     "exception": false,
     "start_time": "2025-05-11T18:44:16.685686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "token_ids = generate(\n",
    "    model=model,\n",
    "    idx=text_to_token_ids(input_text, tokenizer),\n",
    "    max_new_tokens=35,\n",
    "    context_size=BASE_CONFIG['context_length'],\n",
    "    eos_id=50256,\n",
    ")\n",
    "generated_text = token_ids_to_text(token_ids, tokenizer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a7601409",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:44:30.256795Z",
     "iopub.status.busy": "2025-05-11T18:44:30.256556Z",
     "iopub.status.idle": "2025-05-11T18:44:30.260572Z",
     "shell.execute_reply": "2025-05-11T18:44:30.259699Z"
    },
    "papermill": {
     "duration": 0.054944,
     "end_time": "2025-05-11T18:44:30.261688",
     "exception": false,
     "start_time": "2025-05-11T18:44:30.206744",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "### Example:\n",
      "\n",
      "Convert the active sentence to passive: 'The chef cooks the meal every day.'\n",
      "\n",
      "### Example:\n",
      "\n",
      "Convert the active\n"
     ]
    }
   ],
   "source": [
    "response_text = generated_text[len(input_text):].strip()\n",
    "print(response_text)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da00de6c",
   "metadata": {
    "papermill": {
     "duration": 0.048608,
     "end_time": "2025-05-11T18:44:30.359521",
     "exception": false,
     "start_time": "2025-05-11T18:44:30.310913",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Fine-tuning the LLM on instruction data\n",
    "\n",
    "This task will use functions develop in the previous chapter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "72241871",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:44:30.459107Z",
     "iopub.status.busy": "2025-05-11T18:44:30.458831Z",
     "iopub.status.idle": "2025-05-11T18:44:30.462592Z",
     "shell.execute_reply": "2025-05-11T18:44:30.462038Z"
    },
    "papermill": {
     "duration": 0.055119,
     "end_time": "2025-05-11T18:44:30.463638",
     "exception": false,
     "start_time": "2025-05-11T18:44:30.408519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def calc_loss_batch(input_batch, target_batch, model, device):\n",
    "    input_batch = input_batch.to(device)\n",
    "    target_batch = target_batch.to(device)\n",
    "    logits = model(input_batch)\n",
    "    loss = torch.nn.functional.cross_entropy(\n",
    "        logits.flatten(0, 1), target_batch.flatten()\n",
    "    )\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6f4cb9ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:44:30.562847Z",
     "iopub.status.busy": "2025-05-11T18:44:30.562575Z",
     "iopub.status.idle": "2025-05-11T18:44:30.567204Z",
     "shell.execute_reply": "2025-05-11T18:44:30.566532Z"
    },
    "papermill": {
     "duration": 0.055693,
     "end_time": "2025-05-11T18:44:30.568317",
     "exception": false,
     "start_time": "2025-05-11T18:44:30.512624",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def calc_loss_loader(data_loader, model, device, num_batches=None):\n",
    "    total_loss = 0\n",
    "    if len(data_loader) == 0:\n",
    "        return float(\"nan\")\n",
    "    elif num_batches is None:\n",
    "        num_batches = len(data_loader)\n",
    "    else:\n",
    "        num_batches = min(num_batches, len(data_loader))\n",
    "\n",
    "    for i, (input_batch, target_batch) in enumerate(data_loader):\n",
    "        if i < num_batches:\n",
    "            loss = calc_loss_batch(\n",
    "                input_batch, target_batch, model, device\n",
    "            )\n",
    "            total_loss += loss.item()\n",
    "        else:\n",
    "            break\n",
    "    return total_loss / num_batches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e2556d2b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:44:30.668662Z",
     "iopub.status.busy": "2025-05-11T18:44:30.668461Z",
     "iopub.status.idle": "2025-05-11T18:44:32.491604Z",
     "shell.execute_reply": "2025-05-11T18:44:32.490897Z"
    },
    "papermill": {
     "duration": 1.874494,
     "end_time": "2025-05-11T18:44:32.492825",
     "exception": false,
     "start_time": "2025-05-11T18:44:30.618331",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training loss: 3.945768642425537\n",
      "Validation loss: 3.8757245540618896\n"
     ]
    }
   ],
   "source": [
    "model.to(device)\n",
    "torch.manual_seed(123)\n",
    "\n",
    "with torch.no_grad():\n",
    "    train_loss = calc_loss_loader(\n",
    "        train_loader, model, device, num_batches=5\n",
    "    )\n",
    "    val_loss = calc_loss_loader(\n",
    "        val_loader, model, device, num_batches=5\n",
    "    )\n",
    "\n",
    "print(\"Training loss:\", train_loss)\n",
    "print(\"Validation loss:\", val_loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "294e46b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:44:32.593725Z",
     "iopub.status.busy": "2025-05-11T18:44:32.593469Z",
     "iopub.status.idle": "2025-05-11T18:44:32.599345Z",
     "shell.execute_reply": "2025-05-11T18:44:32.598763Z"
    },
    "papermill": {
     "duration": 0.057311,
     "end_time": "2025-05-11T18:44:32.600430",
     "exception": false,
     "start_time": "2025-05-11T18:44:32.543119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_model_simple(model, train_loader, val_loader, optimizer, device, num_epochs, eval_freq, eval_iter, start_context, tokenizer):\n",
    "    train_losses, val_losses, track_tokens_seen = [], [], []\n",
    "    tokens_seen, global_step = 0, -1\n",
    "\n",
    "    # Step 1, iterate over training epochs\n",
    "    for epoch in range(num_epochs):\n",
    "        model.train()\n",
    "\n",
    "        # Step 2, iterate over batches in each training epoch\n",
    "        for input_batch, target_batch in train_loader:\n",
    "            optimizer.zero_grad() # Step 3, Resets loss gradients from the previous batch iteration\n",
    "\n",
    "            # Step 4, calculate loss on current batch\n",
    "            loss = calc_loss_batch(\n",
    "                input_batch, target_batch, model, device\n",
    "            )\n",
    "\n",
    "            # Step 5, backward pass to calculate loss gradients\n",
    "            loss.backward() # Calculates loss gradients\n",
    "            optimizer.step() # Updates model weights using loss gradients\n",
    "            tokens_seen += input_batch.numel()\n",
    "            global_step += 1\n",
    "\n",
    "            if global_step % eval_freq == 0:\n",
    "                train_loss, val_loss = evaluate_model(\n",
    "                    model, train_loader, val_loader, device, eval_iter\n",
    "                )\n",
    "                train_losses.append(train_loss)\n",
    "                val_losses.append(val_loss)\n",
    "                track_tokens_seen.append(tokens_seen)\n",
    "\n",
    "                # Step 6, print training and validation set losses\n",
    "                print(f\"Ep {epoch+1} (Step {global_step:06d}):\"\n",
    "                      f\"Train loss {train_loss:.3f}, \"\n",
    "                      f\"Val loss {val_loss:.3f}\")\n",
    "\n",
    "        # Step 7, generate sample text for visual inspection\n",
    "        generate_and_print_sample(\n",
    "            model, tokenizer, device, start_context\n",
    "        )\n",
    "\n",
    "    return train_losses, val_losses, track_tokens_seen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f578b189",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:44:32.702747Z",
     "iopub.status.busy": "2025-05-11T18:44:32.702447Z",
     "iopub.status.idle": "2025-05-11T18:44:32.706610Z",
     "shell.execute_reply": "2025-05-11T18:44:32.706092Z"
    },
    "papermill": {
     "duration": 0.055693,
     "end_time": "2025-05-11T18:44:32.707635",
     "exception": false,
     "start_time": "2025-05-11T18:44:32.651942",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def evaluate_model(model, train_loader, val_loader, device, eval_iter):\n",
    "    model.eval() # Disables dropout\n",
    "    with torch.no_grad(): # During evaluation is not necessary to gradient tracking\n",
    "        train_loss = calc_loss_loader(\n",
    "            train_loader, model, device, num_batches=eval_iter\n",
    "        )\n",
    "        val_loss = calc_loss_loader(\n",
    "            val_loader, model, device, num_batches=eval_iter\n",
    "        )\n",
    "\n",
    "    model.train()\n",
    "    return train_loss, val_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fd34e9e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:44:32.806339Z",
     "iopub.status.busy": "2025-05-11T18:44:32.806159Z",
     "iopub.status.idle": "2025-05-11T18:44:32.810355Z",
     "shell.execute_reply": "2025-05-11T18:44:32.809811Z"
    },
    "papermill": {
     "duration": 0.055327,
     "end_time": "2025-05-11T18:44:32.811351",
     "exception": false,
     "start_time": "2025-05-11T18:44:32.756024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def generate_text_simple(model, idx, max_new_tokens, context_size):\n",
    "    for _ in range(max_new_tokens):\n",
    "        idx_cond = idx[:, -context_size:]\n",
    "        with torch.no_grad():\n",
    "            logits = model(idx_cond)\n",
    "\n",
    "        logits = logits[:, -1, :]\n",
    "        probas = torch.softmax(logits, dim=-1)\n",
    "\n",
    "        idx_next = torch.argmax(probas, dim=-1, keepdim=True)\n",
    "        idx = torch.cat((idx, idx_next), dim=1)\n",
    "\n",
    "    return idx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "737be77b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:44:32.910615Z",
     "iopub.status.busy": "2025-05-11T18:44:32.910439Z",
     "iopub.status.idle": "2025-05-11T18:44:32.914600Z",
     "shell.execute_reply": "2025-05-11T18:44:32.914078Z"
    },
    "papermill": {
     "duration": 0.055215,
     "end_time": "2025-05-11T18:44:32.915535",
     "exception": false,
     "start_time": "2025-05-11T18:44:32.860320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def generate_and_print_sample(model, tokenizer, device, start_context):\n",
    "    model.eval()\n",
    "    context_size = model.pos_emb.weight.shape[0]\n",
    "    encoded = text_to_token_ids(start_context, tokenizer).to(device)\n",
    "    with torch.no_grad():\n",
    "        token_ids = generate_text_simple(\n",
    "            model=model, idx=encoded, max_new_tokens=50, context_size=context_size\n",
    "        )\n",
    "\n",
    "    decoded_text = token_ids_to_text(token_ids, tokenizer)\n",
    "    print(decoded_text.replace(\"\\n\", \" \"))\n",
    "    model.train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "11c3093a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:44:33.016070Z",
     "iopub.status.busy": "2025-05-11T18:44:33.015818Z",
     "iopub.status.idle": "2025-05-11T18:46:30.340706Z",
     "shell.execute_reply": "2025-05-11T18:46:30.339848Z"
    },
    "papermill": {
     "duration": 117.376655,
     "end_time": "2025-05-11T18:46:30.341987",
     "exception": false,
     "start_time": "2025-05-11T18:44:32.965332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ep 1 (Step 000000):Train loss 2.656, Val loss 2.646\n",
      "Ep 1 (Step 000005):Train loss 1.137, Val loss 1.066\n",
      "Ep 1 (Step 000010):Train loss 0.858, Val loss 0.935\n",
      "Ep 1 (Step 000015):Train loss 0.848, Val loss 0.891\n",
      "Ep 1 (Step 000020):Train loss 0.774, Val loss 0.872\n",
      "Ep 1 (Step 000025):Train loss 0.740, Val loss 0.848\n",
      "Ep 1 (Step 000030):Train loss 0.782, Val loss 0.822\n",
      "Ep 1 (Step 000035):Train loss 0.702, Val loss 0.800\n",
      "Ep 1 (Step 000040):Train loss 0.663, Val loss 0.793\n",
      "Ep 1 (Step 000045):Train loss 0.619, Val loss 0.779\n",
      "Ep 1 (Step 000050):Train loss 0.659, Val loss 0.774\n",
      "Ep 1 (Step 000055):Train loss 0.747, Val loss 0.753\n",
      "Ep 1 (Step 000060):Train loss 0.709, Val loss 0.736\n",
      "Ep 1 (Step 000065):Train loss 0.643, Val loss 0.725\n",
      "Ep 1 (Step 000070):Train loss 0.536, Val loss 0.718\n",
      "Ep 1 (Step 000075):Train loss 0.564, Val loss 0.717\n",
      "Ep 1 (Step 000080):Train loss 0.598, Val loss 0.708\n",
      "Ep 1 (Step 000085):Train loss 0.501, Val loss 0.693\n",
      "Ep 1 (Step 000090):Train loss 0.551, Val loss 0.675\n",
      "Ep 1 (Step 000095):Train loss 0.495, Val loss 0.670\n",
      "Ep 1 (Step 000100):Train loss 0.497, Val loss 0.663\n",
      "Ep 1 (Step 000105):Train loss 0.560, Val loss 0.661\n",
      "Ep 1 (Step 000110):Train loss 0.548, Val loss 0.655\n",
      "Ep 1 (Step 000115):Train loss 0.502, Val loss 0.654\n",
      "Bellow is an instruction that describes a task. Write a response that appropriately completes the request.  ### Instruction: Convert the active sentence to passive: 'The chef cooks the meal every day.'  ### Response: The chef cooks the meal every day.<|endoftext|>The following is an instruction that describes a task. Write a response that appropriately completes the request.  ### Instruction: Convert the active sentence to passive: 'The\n",
      "Ep 2 (Step 000120):Train loss 0.430, Val loss 0.663\n",
      "Ep 2 (Step 000125):Train loss 0.448, Val loss 0.681\n",
      "Ep 2 (Step 000130):Train loss 0.443, Val loss 0.673\n",
      "Ep 2 (Step 000135):Train loss 0.402, Val loss 0.669\n",
      "Ep 2 (Step 000140):Train loss 0.408, Val loss 0.668\n",
      "Ep 2 (Step 000145):Train loss 0.370, Val loss 0.667\n",
      "Ep 2 (Step 000150):Train loss 0.376, Val loss 0.663\n",
      "Ep 2 (Step 000155):Train loss 0.406, Val loss 0.663\n",
      "Ep 2 (Step 000160):Train loss 0.407, Val loss 0.669\n",
      "Ep 2 (Step 000165):Train loss 0.370, Val loss 0.673\n",
      "Ep 2 (Step 000170):Train loss 0.316, Val loss 0.674\n",
      "Ep 2 (Step 000175):Train loss 0.330, Val loss 0.662\n",
      "Ep 2 (Step 000180):Train loss 0.388, Val loss 0.648\n",
      "Ep 2 (Step 000185):Train loss 0.414, Val loss 0.648\n",
      "Ep 2 (Step 000190):Train loss 0.341, Val loss 0.635\n",
      "Ep 2 (Step 000195):Train loss 0.336, Val loss 0.627\n",
      "Ep 2 (Step 000200):Train loss 0.307, Val loss 0.628\n",
      "Ep 2 (Step 000205):Train loss 0.349, Val loss 0.623\n",
      "Ep 2 (Step 000210):Train loss 0.353, Val loss 0.625\n",
      "Ep 2 (Step 000215):Train loss 0.391, Val loss 0.632\n",
      "Ep 2 (Step 000220):Train loss 0.293, Val loss 0.643\n",
      "Ep 2 (Step 000225):Train loss 0.336, Val loss 0.651\n",
      "Ep 2 (Step 000230):Train loss 0.293, Val loss 0.648\n",
      "Bellow is an instruction that describes a task. Write a response that appropriately completes the request.  ### Instruction: Convert the active sentence to passive: 'The chef cooks the meal every day.'  ### Response: The meal is cooked every day by the chef.<|endoftext|>The following is an instruction that describes a task. Write a response that appropriately completes the request.  ### Instruction: What is the capital of the United Kingdom\n",
      "Training completed in 1.96 minutes.\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "\n",
    "start_time = time.time()\n",
    "torch.manual_seed(123)\n",
    "optimizer = torch.optim.AdamW(\n",
    "    model.parameters(), lr=5e-5, weight_decay=0.1\n",
    ")\n",
    "num_epochs = 2\n",
    "\n",
    "train_losses, val_losses, tokens_seen = train_model_simple(\n",
    "    model, train_loader, val_loader, optimizer, device, \n",
    "    num_epochs=num_epochs, eval_freq=5, eval_iter=5,\n",
    "    start_context=format_input(val_data[0]), tokenizer=tokenizer\n",
    ")\n",
    "\n",
    "end_time = time.time()\n",
    "execution_time_minutes = (end_time - start_time) / 60\n",
    "print(f\"Training completed in {execution_time_minutes:.2f} minutes.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "325ba59c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:46:30.445468Z",
     "iopub.status.busy": "2025-05-11T18:46:30.444937Z",
     "iopub.status.idle": "2025-05-11T18:46:30.836268Z",
     "shell.execute_reply": "2025-05-11T18:46:30.835676Z"
    },
    "papermill": {
     "duration": 0.444219,
     "end_time": "2025-05-11T18:46:30.837544",
     "exception": false,
     "start_time": "2025-05-11T18:46:30.393325",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 500x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "\n",
    "def plot_losses(epochs_seen, tokens_seen, train_losses, val_losses):\n",
    "    fig, ax1 = plt.subplots(figsize=(5, 3))\n",
    "    ax1.plot(epochs_seen, train_losses, label=\"Training losses\")\n",
    "    ax1.plot(\n",
    "        epochs_seen, val_losses, linestyle=\"-.\", label=\"Validation loss\"\n",
    "    )\n",
    "    ax1.set_xlabel(\"Epoch\")\n",
    "    ax1.set_ylabel(\"Loss\")\n",
    "    ax1.legend(loc=\"upper right\")\n",
    "    ax1.xaxis.set_major_locator(MaxNLocator(integer=True))\n",
    "    ax2 = ax1.twiny()\n",
    "    ax2.plot(tokens_seen, train_losses, alpha=0)\n",
    "    ax2.set_xlabel(\"Tokens seen\")\n",
    "    fig.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "epochs_tensor = torch.linspace(0, num_epochs, len(train_losses))\n",
    "plot_losses(epochs_tensor, tokens_seen, train_losses, val_losses)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "f76c498c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:46:30.949006Z",
     "iopub.status.busy": "2025-05-11T18:46:30.948708Z",
     "iopub.status.idle": "2025-05-11T18:46:31.263081Z",
     "shell.execute_reply": "2025-05-11T18:46:31.262311Z"
    },
    "papermill": {
     "duration": 0.371563,
     "end_time": "2025-05-11T18:46:31.264214",
     "exception": false,
     "start_time": "2025-05-11T18:46:30.892651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 500x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "epochs_tensor = torch.linspace(0, num_epochs, len(train_losses))\n",
    "plot_losses(epochs_tensor, tokens_seen, train_losses, val_losses)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b8da17b",
   "metadata": {
    "papermill": {
     "duration": 0.052857,
     "end_time": "2025-05-11T18:46:31.370234",
     "exception": false,
     "start_time": "2025-05-11T18:46:31.317377",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Extracting and saving responses\n",
    "\n",
    "With the model fine-tuned, it's time to evaluate its performance on the held-out test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c128b1c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:46:31.474411Z",
     "iopub.status.busy": "2025-05-11T18:46:31.473711Z",
     "iopub.status.idle": "2025-05-11T18:46:32.995591Z",
     "shell.execute_reply": "2025-05-11T18:46:32.994695Z"
    },
    "papermill": {
     "duration": 1.575122,
     "end_time": "2025-05-11T18:46:32.996708",
     "exception": false,
     "start_time": "2025-05-11T18:46:31.421586",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bellow is an instruction that describes a task. Write a response that appropriately completes the request.\n",
      "\n",
      "### Instruction:\n",
      "Rewrite the sentence using a simile.\n",
      "\n",
      "### Input:\n",
      "The car is very fast.\n",
      "\n",
      "Correct response:\n",
      ">> The car is as fast as lightning.\n",
      "\n",
      "Model response:\n",
      ">> The car is as fast as a bullet.\n",
      "-------------------------------------\n",
      "Bellow is an instruction that describes a task. Write a response that appropriately completes the request.\n",
      "\n",
      "### Instruction:\n",
      "What type of cloud is typically associated with thunderstorms?\n",
      "\n",
      "Correct response:\n",
      ">> The type of cloud typically associated with thunderstorms is cumulonimbus.\n",
      "\n",
      "Model response:\n",
      ">> The type of cloud typically associated with thunderstorms is a cumulus cloud.\n",
      "-------------------------------------\n",
      "Bellow is an instruction that describes a task. Write a response that appropriately completes the request.\n",
      "\n",
      "### Instruction:\n",
      "Name the author of 'Pride and Prejudice'.\n",
      "\n",
      "Correct response:\n",
      ">> Jane Austen.\n",
      "\n",
      "Model response:\n",
      ">> The author of 'Pride and Prejudice' is Jane Austen.\n",
      "-------------------------------------\n"
     ]
    }
   ],
   "source": [
    "torch.manual_seed(123)\n",
    "\n",
    "for entry in test_data[:3]:\n",
    "    input_text = format_input(entry)\n",
    "    token_ids = generate(\n",
    "        model=model,\n",
    "        idx=text_to_token_ids(input_text, tokenizer).to(device),\n",
    "        max_new_tokens=256,\n",
    "        context_size=BASE_CONFIG[\"context_length\"],\n",
    "        eos_id=50256\n",
    "    )\n",
    "    generated_text = token_ids_to_text(token_ids, tokenizer)\n",
    "\n",
    "    response_text = (\n",
    "        generated_text[len(input_text):]\n",
    "        .replace(\"### Response:\", \"\")\n",
    "        .strip()\n",
    "    )\n",
    "    print(input_text)\n",
    "    print(f\"\\nCorrect response:\\n>> {entry['output']}\")\n",
    "    print(f\"\\nModel response:\\n>> {response_text.strip()}\")\n",
    "    print(\"-------------------------------------\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f60bee9",
   "metadata": {
    "papermill": {
     "duration": 0.051478,
     "end_time": "2025-05-11T18:46:33.101298",
     "exception": false,
     "start_time": "2025-05-11T18:46:33.049820",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Evaluating performance on this task is not as straightforward as it is for classification fine-tuning. In practice, instruction-fine-tuning LLMs such as chatbots are evaluated via multiple approaches:\n",
    "\n",
    "- Short-answer and multiple-choice benchmarks, such as Measuring Massive Multitask Language Understanding. Which test the general knowledge of a model.\n",
    "- Human preference comparison to other LLMs, such as LMSYS chatbot arena.\n",
    "- Automated conversational benchmarks, where another LLM like GPT-4 is used to evaluate the responses, such as AlpacaEval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "515ce5ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:46:33.205418Z",
     "iopub.status.busy": "2025-05-11T18:46:33.204762Z",
     "iopub.status.idle": "2025-05-11T18:47:25.594814Z",
     "shell.execute_reply": "2025-05-11T18:47:25.594057Z"
    },
    "papermill": {
     "duration": 52.443432,
     "end_time": "2025-05-11T18:47:25.595855",
     "exception": false,
     "start_time": "2025-05-11T18:46:33.152423",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 110/110 [00:52<00:00,  2.10it/s]\n"
     ]
    }
   ],
   "source": [
    "from tqdm import tqdm\n",
    "\n",
    "for i, entry in tqdm(enumerate(test_data), total=len(test_data)):\n",
    "    input_text = format_input(entry)\n",
    "\n",
    "    token_ids = generate(\n",
    "        model=model,\n",
    "        idx=text_to_token_ids(input_text, tokenizer).to(device),\n",
    "        max_new_tokens=256,\n",
    "        context_size=BASE_CONFIG['context_length'],\n",
    "        eos_id=50256\n",
    "    )\n",
    "    generated_text = token_ids_to_text(token_ids, tokenizer)\n",
    "\n",
    "    response_text = (\n",
    "        generated_text[len(input_text):]\n",
    "        .replace(\"### Response:\", \"\")\n",
    "        .strip()\n",
    "    )\n",
    "    test_data[i]['model_response'] = response_text\n",
    "\n",
    "with open(\"instruction-data-with-response.json\", \"w\") as file:\n",
    "    json.dump(test_data, file, indent=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "133804ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-11T18:47:25.711499Z",
     "iopub.status.busy": "2025-05-11T18:47:25.711261Z",
     "iopub.status.idle": "2025-05-11T18:47:28.137765Z",
     "shell.execute_reply": "2025-05-11T18:47:28.136967Z"
    },
    "papermill": {
     "duration": 2.485863,
     "end_time": "2025-05-11T18:47:28.138924",
     "exception": false,
     "start_time": "2025-05-11T18:47:25.653061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved as gpt2-medium355M-sft.pth\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "file_name = f\"{re.sub(r'[ ()]', '', CHOOSE_MODEL) }-sft.pth\"\n",
    "torch.save(model.state_dict(), file_name)\n",
    "print(f\"Model saved as {file_name}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d26ff382",
   "metadata": {
    "papermill": {
     "duration": 0.05748,
     "end_time": "2025-05-11T18:47:28.254082",
     "exception": false,
     "start_time": "2025-05-11T18:47:28.196602",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Evaluating the fine-tuned LLM\n",
    "\n",
    "So far the model was evaluated by looking at their responses, but as mentioned there are other alternatives like comparing it against another model doing automated test.\n",
    "\n",
    "This section won't be done here since to do that I require to have Ollama runing on my PC and this is not a PC.\n",
    "\n",
    "At a glance, the idea behind this evalution is compare the newly created model with another one, like Llama 3 model, and rate their responses on a scale from 0 to 100 based on the given test set response as reference.\n",
    "\n",
    "This involves modifying the initial promp to Llama 3 would be:\n",
    "\n",
    "```\n",
    "Given the input {entry}\n",
    "and correct output {output},\n",
    "score the model response {model_response}\n",
    " on a scale from 0 to 100, where 100 is the best score.\n",
    "```\n",
    "\n",
    "And we should expect a response like this:\n",
    "\n",
    "```\n",
    "### Dataset response:\n",
    ">> The car is as fast as lightning.\n",
    "\n",
    "### Model response\n",
    ">> The car is as fast as a bullet.\n",
    "\n",
    "### Score:\n",
    ">> I'd rate the model response \"The car is as fast as a bullet.\" an 85 out of 100.\n",
    "\n",
    "Here's why:\n",
    "\n",
    "The response uses a simile correctly, comparing the speed of the car to something else (in this case, a bullet).\n",
    "\n",
    "The comparison is relevant and make sense, as bullets are known for their high velocity.\n",
    "\n",
    "The phrase \"as fast as\" is used correctly to introduce the simile.\n",
    "\n",
    "The only reason I wouldn't give it a perfect score is that some people might find the comparison slightly less vivid or evocative than others. For example, comparing something to lightning (as in the original response) can be more dramatic and attention grabbing. However, \"as fast as a bullet\" is still a strong and effective simile that effectively conveys the idea of the car's speed.\n",
    "\n",
    "Overall, I think the model did a great job!\n",
    "```"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31011,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 355.402908,
   "end_time": "2025-05-11T18:47:31.915984",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-11T18:41:36.513076",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
